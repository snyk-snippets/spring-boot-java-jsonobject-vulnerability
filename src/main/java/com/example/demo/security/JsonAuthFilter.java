package com.example.demo.security;

import org.json.JSONObject;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.BufferedReader;
import java.io.IOException;


public class JsonAuthFilter extends UsernamePasswordAuthenticationFilter {

    @Override
    public Authentication attemptAuthentication(HttpServletRequest request, HttpServletResponse response) 
            throws AuthenticationException {
        try {
            StringBuilder sb = new StringBuilder();
            BufferedReader reader = request.getReader();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line);
            }
            JSONObject json = new JSONObject(sb.toString());
            String username = json.optString("username", null);
            String password = json.optString("password", null);
            UsernamePasswordAuthenticationToken authRequest = new UsernamePasswordAuthenticationToken(
                    username, password);
            setDetails(request, authRequest);
            return this.getAuthenticationManager().authenticate(authRequest);
        } catch (IOException e) {
            throw new RuntimeException("Failed to parse request", e);
        }
    }

    public void setUserDetailsService(UserDetailsService userDetailsService) {
    }
}

// public class JsonAuthFilter extends OncePerRequestFilter {

//     private final UserDetailsService userDetailsService;


//     public JsonAuthFilter(UserDetailsService userDetailsService) {
//         this.userDetailsService = userDetailsService;
//     }


//     @Override
//     protected void doFilterInternal(jakarta.servlet.http.HttpServletRequest request,
//             jakarta.servlet.http.HttpServletResponse response, jakarta.servlet.FilterChain filterChain)
//             throws jakarta.servlet.ServletException, IOException {
        
//         if ("/login".equals(request.getRequestURI()) && 
//             "POST".equalsIgnoreCase(request.getMethod())) {
            
//             System.out.println("POST /login handled in JsonAuthFilter");
            
//             try {
//                 StringBuilder sb = new StringBuilder();
//                 BufferedReader reader = request.getReader();
//                 String line;
//                 while ((line = reader.readLine()) != null) {
//                     sb.append(line);
//                 }
//                 System.out.println(sb.toString());
//                 JSONObject json = new JSONObject(sb.toString());
//                 String username = json.optString("username", null);
//                 String password = json.optString("password", null);
//                 System.out.println(username + " @ " + password);

//                 // Check if username or password is empty
//                 if (username == null || username.isEmpty() || password == null || password.isEmpty()) {
//                     throw new IllegalArgumentException("Username or Password is missing");
//                 }

//                 UserDetails userDetails = userDetailsService.loadUserByUsername(username);
//                 PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();

//                 if (userDetails != null && encoder.matches(password, userDetails.getPassword())) {
//                     System.out.println("Hurray!");
//                     System.out.println(userDetails.getAuthorities());

//                     UsernamePasswordAuthenticationToken authentication = 
//                         new UsernamePasswordAuthenticationToken(username, password, userDetails.getAuthorities());
//                     SecurityContextHolder.getContext().setAuthentication(authentication);
//                 } else {
//                     throw new BadCredentialsException("Invalid username or password");
//                 }
//             } catch (UsernameNotFoundException ex) {
//                 System.err.println("User not found: " + ex.getMessage());
//                 // Handle user not found scenario
//             } catch (Exception ex) {
//                 System.err.println("Authentication error: " + ex.getMessage());
//                 // Handle other exceptions
//             }


//             // try (BufferedReader reader = request.getReader()) {
//             //     while ((line = reader.readLine()) != null) {
//             //         sb.append(line);
//             //     }

//             //     JSONObject json = new JSONObject(sb.toString());
//             //     String username = json.optString("username");
//             //     String password = json.optString("password");
                
//             //     UserDetails userDetails = userDetailsService.loadUserByUsername(username);
//             //     PasswordEncoder encoder = PasswordEncoderFactories.createDelegatingPasswordEncoder();

//             //     if (userDetails != null && encoder.matches(password, userDetails.getPassword())) {
//             //         System.out.println("Hurray!");
//             //         System.out.println(userDetails.getAuthorities());

//             //         UsernamePasswordAuthenticationToken authentication = 
//             //             new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
//             //         SecurityContextHolder.getContext().setAuthentication(authentication);
//             //     }
//             // } catch (Exception e) {
//             //     throw new jakarta.servlet.ServletException("Error parsing JSON request", e);
//             // }
//         }
        
//         filterChain.doFilter(request, response);
//     }
// }

